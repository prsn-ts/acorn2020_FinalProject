<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">
	<insert id="addProduct" parameterType="productDto">
		INSERT INTO sbproduct
		(num, kind, productname, content, price, regdate,profile,buycount)
		VALUES(sbproduct_seq.NEXTVAL, #{kind }, #{productname },  #{content }, #{price }, SYSDATE,#{profile},0)
	</insert>
	
	<select id="getCount" parameterType="productDto" resultType="int">
		SELECT NVL(MAX(ROWNUM), 0)
		FROM sbproduct
		<choose>
			<when test="kindSelect!=null and search!=null">
				WHERE productname LIKE '%'||#{search }||'%'
				AND kind = #{kindSelect }
			</when>
			<when test="kindSelect!=null">
				WHERE kind = #{kindSelect }
			</when>
			<when test="search!=null">
				WHERE productname LIKE '%'||#{search }||'%'
			</when>
		</choose>
	</select>	
	
	<select id="productList" parameterType="productDto" resultType="productDto">
      SELECT *
      FROM
         (SELECT result1.*, ROWNUM AS rnum
         FROM
            (SELECT num, productname, kind, content, price, TO_CHAR(regdate, 'YYYY-MM-DD') as regdate, profile ,buycount
            FROM sbproduct
            <choose>
               <when test="kindSelect!=null and keyword!=null">
                  WHERE productname LIKE '%'||#{keyword }||'%'
                  AND kind = #{kindSelect }
               </when>
               <when test="keyword!=null">
                  WHERE productname LIKE '%'||#{keyword }||'%'
               </when>
               <when test="kindSelect!=null">
                  WHERE kind = #{kindSelect }
               </when>
               <when test="search!=null">
                  WHERE productname LIKE '%'||#{search }||'%'
               </when>
            </choose>
            <choose>
               <when test="arr==null">
                  ORDER BY num DESC
               </when>
               <when test="arr=='priceHighArr'">
                  ORDER BY price DESC , num DESC
               </when>
               <when test="arr=='priceLowArr'">
                  ORDER BY price ASC , num DESC
               </when>
               <when test="arr=='buyHighArr'">
                  ORDER BY buycount DESC , num DESC
               </when>
            </choose>
            )result1)
      WHERE rnum BETWEEN #{startRowNum} AND #{endRowNum}
   </select>
	
	<select id="homeList" parameterType="productDto" resultType="productDto">
		SELECT num, productname, kind, content, price, regdate, profile
		FROM sbproduct
		ORDER BY num DESC
	</select>
	
	<insert id="insert_sub" parameterType="productDto">
		insert into sbproduct_sub(subnum, num, sbsize, sbcount) values(sbproduct_sub_seq.NEXTVAL, #{num},#{sbsize},#{sbcount})
	</insert>
	<select id="getnum" resultType="int">
		 SELECT sbproduct_seq.currval as num FROM DUAL
	</select>
	
	<!-- 상품 정보를 가져오는 sql문 -->
	<select id="getData2" parameterType="int" resultType="ProductDto">
		select num,productname,kind,content,price,regdate,profile
		from sbproduct
		where num=#{num}
	</select>
	<!-- 특정 상품번호의 모든 정보(신발 사이즈, 수량 포함)를 가져오는 sql문 -->
	<select id="getSubData" parameterType="int" resultType="ProductDto">
		SELECT detailSelect.*, ROWNUM rnum
			FROM
			(select num,productname,kind,content,price,regdate,profile,sbsize,sbcount
			from sbproduct
			inner join sbproduct_sub using(num)
			where num=#{num}
			order by sbsize ASC) detailSelect
	</select>
	<!-- 특정 상품번호에 선택할 수 있는 신발 사이즈 항목의 총 개수를 가져오는 sql문 -->
	<select id="getSizeData" parameterType="int" resultType="int">
		select MAX(rnum)
			from
			(SELECT detailSelect.*, ROWNUM rnum
				FROM
				(select num,productname,kind,content,price,regdate,profile,sbsize,sbcount
				from sbproduct
				inner join sbproduct_sub using(num)
				where num=#{num}) detailSelect)
	</select>
	<!-- 특정 상품번호의 특정 사이즈의 정보(재고 개수 포함)를 리턴하는 sql문 -->
	<select id="getStockData" parameterType="Map" resultType="productDto">
		select detailSelect.*, ROWNUM rnum
			from
			(select num,productname,kind,content,price,regdate,profile,sbsize,sbcount
				from sbproduct
				inner join sbproduct_sub using(num)
				where num=#{num}
				order by sbsize ASC) detailSelect
		where sbsize=#{size}
	</select>
	
	<select id="isExist" parameterType="java.lang.String" 
		resultType="string"> <!-- java.long.String or string 아무거나 써도 인식한다. -->
		SELECT productname
		FROM sbproduct
		WHERE productname=#{inputproductname}
	</select>
	<delete id="productdelete" parameterType="int">
		delete from sbproduct
		where num=#{num}
	</delete>
	
	<select id="getData" parameterType="int" resultType="productDto">
		SELECT sbproduct.num,kind,price, productname, content, regdate, profile,
		 sbcount, sbsize
		FROM sbproduct, sbproduct_sub
		WHERE sbproduct.num = sbproduct_sub.num and sbproduct.num=#{num}
		ORDER BY sbsize asc
	</select>
	
	<update id="update" parameterType="productDto">
		UPDATE sbproduct SET kind=#{kind},price=#{price}, profile=#{profile}, content=#{content}
		WHERE num=#{num}
	</update>
	<update id="updatesub" parameterType="productDto">
		UPDATE sbproduct_sub SET
		sbcount=#{sbcount}
		WHERE num=#{num} and sbsize=#{sbsize}
	</update>
	
	<insert id="order" parameterType="orderDto">
		INSERT INTO sborder(num,productnum,id,name,addr,phone_num,sendrequest,totalprice,orderdate,sboption)
		values(sborder_seq.nextval,#{productnum},#{id},#{name},#{addr},#{phone_num},#{sendrequest},#{totalPrice},sysdate,#{sboption})
	</insert>
	
	<update id="addpoint" parameterType="orderDto">
		update sblogin_account
		set point = point + (#{totalPrice}*0.01)
		where id = #{id}
	</update>
	
	
	
	
	<update id="minus_money" parameterType="orderDto">
		update sblogin_account
		set money = money - #{totalPrice}
		where id = #{id}
	</update>
	
	<update id="minus_count" parameterType="orderDto">
		update sbproduct_sub
		set sbcount =  sbcount - #{sbcount}
		where num = #{productnum} and sbsize = #{sbsize}
	</update>
	<!--
		select sborder.num as num ,productnum,id,name,addr,phone_num,sendrequest,totalprice,to_char(orderdate,'yyyy-mm-dd') as orderdate,sboption,
		productname,profile 
		from sborder, sbproduct
		where sbproduct.num = productnum and id=#{id}
		order by sborder.num desc 
	 -->
	<select id="order_list" parameterType="orderDto" resultType="orderDto">
		SELECT *
		FROM
		(SELECT result1.*, ROWNUM AS rnum
			FROM
				(SELECT sborder.num,productnum,id,name,addr,phone_num,sendrequest,totalprice,to_char(orderdate,'yyyy-mm-dd') as orderdate,sboption,
				productname,profile
				FROM sborder
				INNER JOIN sbproduct
				ON sbproduct.num = productnum
				WHERE id=#{id}
				ORDER BY sborder.num desc) result1)
		WHERE rnum BETWEEN #{startRowNum} AND #{endRowNum}
	</select>
	
	<update id="buycount" parameterType="orderDto">
		update sbproduct
		set buycount = buycount + #{buycount}
		where num = #{num}
	</update>
	
	<select  id="favoritelist" resultType="productDto">
		select * from sbproduct
		order by buycount desc
	 </select>
	 
	 <insert id="saveToBasket_230" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num }, #{kind }, 
	 	#{productname }, #{oneSize }, #{quantity_230 }, #{product_price_230 }, #{initPrice }, #{totalPrice }, #{totalQuantity }, #{buycount }, SYSDATE)
	 </insert>
	 <insert id="saveToBasket_240" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num}, #{kind}, 
	 	#{productname}, #{oneSize}, #{quantity_240}, #{product_price_240}, #{initPrice}, #{totalPrice}, #{totalQuantity}, #{buycount }, SYSDATE)
	 </insert>
	 <insert id="saveToBasket_250" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num}, #{kind}, 
	 	#{productname}, #{oneSize}, #{quantity_250}, #{product_price_250}, #{initPrice}, #{totalPrice}, #{totalQuantity}, #{buycount }, SYSDATE)
	 </insert>
	 <insert id="saveToBasket_260" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num}, #{kind}, 
	 	#{productname}, #{oneSize}, #{quantity_260}, #{product_price_260}, #{initPrice}, #{totalPrice}, #{totalQuantity}, #{buycount }, SYSDATE)
	 </insert>
	 <insert id="saveToBasket_270" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num}, #{kind}, 
	 	#{productname}, #{oneSize}, #{quantity_270}, #{product_price_270}, #{initPrice}, #{totalPrice}, #{totalQuantity}, #{buycount }, SYSDATE)
	 </insert>
	 <insert id="saveToBasket_280" parameterType="productDto">
	 	insert into sbshopping_basket values(sbshopping_basket_seq.NEXTVAL, #{id }, #{num}, #{kind}, 
	 	#{productname}, #{oneSize}, #{quantity_280}, #{product_price_280}, #{initPrice}, #{totalPrice}, #{totalQuantity}, #{buycount }, SYSDATE)
	 </insert>
	 
	 <!-- 장바구니 DB에 저장된 내용을 가져오는 select문  -->
	 <select id="savedBasketInfo" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket 
		WHERE savetime BETWEEN TO_DATE(#{saveTime},'YYYY-MM-DD') AND SYSDATE
		and id=#{id}
	 </select>
	 <!-- 특정 상품 번호에 맞는 리스트를 가져오기 위한 select문  -->
	 <select id="select_230" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <select id="select_240" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <select id="select_250" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <select id="select_260" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <select id="select_270" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <select id="select_280" parameterType="productDto" resultType="productDto">
	 	select * from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </select>
	 <!-- 특정 상품 번호에 맞는 리스트를 제거하기 위한 delete문  -->
	 <delete id="delete_230" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <delete id="delete_240" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <delete id="delete_250" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <delete id="delete_260" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <delete id="delete_270" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <delete id="delete_280" parameterType="productDto">
	 	delete from sbshopping_basket
	 	where num=#{num} and id=#{id} and selectedsize=#{oneSize}
	 </delete>
	 <!-- 장바구니 관련 DB에 저장된 아이디 리스트를 검색하는 select문 -->
	 <select id="selectedId" resultType="String">
	 	select id from sbshopping_basket
	 </select>
	 <!-- 현재 쿠키(아이디)값에 존재하지 않는 장바구니 관련 DB에 저장된 아이디를 삭제하는 delete문 -->
	 <delete id="selectedId_remove">
	 	delete from sbshopping_basket
		where id=#{id}
	 </delete>
	 <select id="selectedAllBasket" resultType="productDto">
	 	select * from sbshopping_basket
	 </select>
	 <!-- 장바구니 테이블에 데이터들을 정렬하여 가져오기 위한 select문 -->
	 <select id="getAlignedBasket" parameterType="productDto" resultType="productDto">
	 	select first_result.*, ROWNUM-1 as basketIndex
		from
			(select * from sbshopping_basket
			where id=#{id} and
			savetime between #{saveTime} and sysdate
			order by num asc)first_result
	 </select>
	 <!-- 물품 삭제하는 X버튼을 누른 특정 상품의 특정 사이즈의 identitynum을 검색해오는 select문 -->
	 <select id="getIdentityNumBasket" parameterType="productDto" resultType="int">
	 	select identitynum
		from
			(select rownum as rnum, first_result.*
			from(select * from sbshopping_basket
				where id=#{id} and 
				savetime between #{saveTime} and sysdate
				order by num asc)first_result)second_result
		where rnum = #{Xid}
	 </select>
	 <!-- identitynum에 해당하는 물품을 삭제하는 delete문 -->
	 <delete id="deleteIdentityNumAtBasket" parameterType="productDto">
	 	delete from sbshopping_basket where identitynum = #{identityNum}
	 </delete>
	 <!-- 선택했던 체크박스의 장바구니 관련 항목을 삭제하는 delete문 -->
	 <delete id="selectedCheckBoxItemRemove" parameterType="productDto">
	 	delete from sbshopping_basket
		where identitynum in(	
			select identitynum
			from
				(select rownum as rnum, first_result.*
				from(select * from sbshopping_basket
					where id=#{id} and 
					savetime between #{saveTime} and sysdate
					order by num asc)first_result)second_result
			where rnum between #{startRnum} and #{endRnum})
	 </delete>
	 <!-- 선택된 아이템 항목에 맞는 재고수량을 가져오는 select문 -->
	 <select id="getSelectedSbproductSub" parameterType="productDto" resultType="productDto">
	 	select * from sbproduct_sub
	 	where num=#{num} and sbsize=#{sbsize}
	 </select>
</mapper>